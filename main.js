/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VerovioMusicRenderer
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// verovioProcessor.ts
async function processVerovioCodeBlocks(source, el, ctx) {
  if (!window.VerovioToolkit) {
    console.log("Verovio is not yet loaded or failed to load.");
    return;
  }
  const settings = this.settings;
  try {
    const data = await fetchFileData(source.trim());
    window.VerovioToolkit.setOptions({
      "scale": settings.scale,
      "adjustPageHeight": settings.adjustPageHeight,
      "adjustPageWidth": settings.adjustPageWidth,
      "breaks": settings.breaks,
      "pageWidth": settings.pageWidth,
      "midiTempoAdjustment": settings.midiTempoAdjustment,
      "font": settings.font
      // This assumes settings.font is a string like "Bravura"
    });
    window.VerovioToolkit.loadData(data);
    const meiData = window.VerovioToolkit.getMEI({ noLayout: false });
    window.VerovioToolkit.loadData(meiData);
    const svg = window.VerovioToolkit.renderToSVG(1);
    const container = document.createElement("div");
    container.className = "verovio-container";
    container.innerHTML = svg;
    const toolbar = createToolbar(data);
    container.appendChild(toolbar);
    el.appendChild(container);
  } catch (error) {
    console.error("Error rendering data:", error);
    el.innerHTML = `<p>Error rendering data: ${error.message}</p>`;
  }
}
async function fetchFileData(path) {
  try {
    let data = "";
    if (isValidUrl(path)) {
      console.log(`Fetching data from URL: ${path}`);
      const response = await fetch(path);
      if (!response.ok)
        throw new Error(`Network response was not ok: ${response.statusText}`);
      data = await response.text();
    } else {
      console.log(`Fetching data from local file: ${path}`);
      const file = app.vault.getAbstractFileByPath(path);
      if (!file)
        throw new Error(`File not found: ${path}`);
      data = await app.vault.read(file);
    }
    return data;
  } catch (error) {
    throw new Error(`Failed to fetch file data: ${error.message}`);
  }
}
function isValidUrl(url) {
  try {
    new URL(url);
    return true;
  } catch (e) {
    return false;
  }
}
function createToolbar(data) {
  const toolbar = document.createElement("div");
  toolbar.className = "verovio-toolbar";
  const playButton = createButton(playIcon(), () => console.log("Play button clicked"));
  const stopButton = createButton(stopIcon(), () => console.log("Stop button clicked"));
  const downloadButton = createButton(downloadIcon(), downloadSVG);
  toolbar.appendChild(playButton);
  toolbar.appendChild(stopButton);
  toolbar.appendChild(downloadButton);
  return toolbar;
}
function createButton(iconSvg, onClick) {
  const button = document.createElement("button");
  button.innerHTML = iconSvg;
  button.onclick = onClick;
  return button;
}
function playIcon() {
  return `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
      <path d="M8 5v14l11-7z"/>
    </svg>
  `;
}
function stopIcon() {
  return `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
      <path d="M6 6h12v12H6z"/>
    </svg>
  `;
}
function downloadIcon() {
  return `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
      <path d="M5 20h14v-2H5v2zm7-18L5.5 8.5 7 10l3-3v9h2V7l3 3 1.5-1.5L12 2z"/>
    </svg>
  `;
}
async function downloadSVG(event) {
  const container = event.target.closest(".verovio-container");
  const svgElement = container.querySelector("svg");
  if (!svgElement) {
    console.error("SVG element not found.");
    return;
  }
  const serializer = new XMLSerializer();
  const source = serializer.serializeToString(svgElement);
  const blob = new Blob([source], { type: "image/svg+xml;charset=utf-8" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = "score.svg";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

// styles.ts
function addVerovioStyles() {
  const style = document.createElement("style");
  style.textContent = `
      .verovio-container {
        max-width: 100%;
        margin: 0 auto;
        padding: 0;
        position: relative;
      }
      .verovio-container svg {
        max-width: 100%;
        height: auto;
      }
      .verovio-toolbar {
        position: absolute;
        top: 10px;
        right: 10px;
        display: none;
        background: rgba(255, 255, 255, 0.8);
        border: 1px solid #ccc;
        padding: 5px;
        border-radius: 3px;
        z-index: 10;
      }
      .verovio-container:hover .verovio-toolbar {
        display: flex;
        gap: 5px;
      }
      .verovio-toolbar button {
        background: none;
        border: none;
        cursor: pointer;
      }
      .verovio-toolbar button svg {
        width: 24px;
        height: 24px;
        fill: black;
      }
      g.note.playing {
        fill: crimson;
      }
    `;
  document.head.appendChild(style);
}

// settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default",
  scale: 100,
  adjustPageHeight: true,
  adjustPageWidth: true,
  breaks: "auto",
  pageWidth: 700,
  midiTempoAdjustment: 1,
  font: "Leipzig"
  // Default font
};
var VerovioSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Scale").setDesc("Scale for Verovio rendering").addSlider((slider) => slider.setLimits(1, 1e3, 1).setValue(this.plugin.settings.scale).onChange(async (value) => {
      this.plugin.settings.scale = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Adjust Page Height").setDesc("Adjust page height").addToggle((toggle) => toggle.setValue(this.plugin.settings.adjustPageHeight).onChange(async (value) => {
      this.plugin.settings.adjustPageHeight = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Adjust Page Width").setDesc("Adjust page width").addToggle((toggle) => toggle.setValue(this.plugin.settings.adjustPageWidth).onChange(async (value) => {
      this.plugin.settings.adjustPageWidth = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Breaks").setDesc("Type of breaks").addDropdown((dropdown) => dropdown.addOption("none", "None").addOption("auto", "Auto").addOption("line", "Line").addOption("smart", "Smart").addOption("encoded", "Encoded").setValue(this.plugin.settings.breaks).onChange(async (value) => {
      this.plugin.settings.breaks = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Page Width").setDesc("Width of the page").addSlider((slider) => slider.setLimits(100, 1200, 50).setValue(this.plugin.settings.pageWidth).onChange(async (value) => {
      this.plugin.settings.pageWidth = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("MIDI Tempo Adjustment").setDesc("Adjustment factor for MIDI tempo").addSlider((slider) => slider.setLimits(0.5, 2, 0.1).setValue(this.plugin.settings.midiTempoAdjustment).onChange(async (value) => {
      this.plugin.settings.midiTempoAdjustment = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Font").setDesc("Musical font for rendering").addDropdown((dropdown) => dropdown.addOption('"Leipzig"', "Leipzig").addOption('"Bravura"', "Bravura").addOption('"Gootville"', "Gootville").addOption('"Leland"', "Leland").setValue(this.plugin.settings.font).onChange(async (value) => {
      this.plugin.settings.font = value;
      await this.plugin.saveSettings();
    }));
  }
};

// main.ts
var VerovioMusicRenderer = class extends import_obsidian2.Plugin {
  async onload() {
    addVerovioStyles();
    try {
      await loadVerovio(this);
      console.log("Verovio loaded successfully.");
    } catch (error) {
      console.error("Failed to load Verovio library:", error);
    }
    await this.loadSettings();
    this.addSettingTab(new VerovioSettingTab(this.app, this));
    this.registerMarkdownCodeBlockProcessor("verovio", (source, el, ctx) => processVerovioCodeBlocks.call(this, source, el, ctx));
    const ribbonIconEl = this.addRibbonIcon("dice", "Verovio Music Renderer", () => {
      new import_obsidian2.Notice("This is a notice!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
async function loadVerovio(plugin) {
  if (window.VerovioToolkitLoading || window.VerovioToolkit)
    return;
  window.VerovioToolkitLoading = true;
  console.log("Loading Verovio toolkit...");
  return new Promise((resolve, reject) => {
    const script = document.createElement("script");
    script.src = "https://www.verovio.org/javascript/latest/verovio-toolkit-wasm.js";
    script.defer = true;
    script.onload = () => {
      if (typeof window.verovio === "undefined" || typeof window.verovio.toolkit !== "function") {
        window.VerovioToolkitLoading = false;
        reject(new Error("Verovio toolkit not correctly loaded."));
        return;
      }
      window.verovio.module.onRuntimeInitialized = () => {
        window.VerovioToolkit = new window.verovio.toolkit();
        console.log("Verovio has loaded successfully");
        window.VerovioToolkitLoading = false;
        resolve();
      };
    };
    script.onerror = () => {
      window.VerovioToolkitLoading = false;
      reject(new Error("Error loading Verovio toolkit script."));
    };
    document.head.appendChild(script);
  });
}
//# sourceMappingURL=data:application/json;base64,
